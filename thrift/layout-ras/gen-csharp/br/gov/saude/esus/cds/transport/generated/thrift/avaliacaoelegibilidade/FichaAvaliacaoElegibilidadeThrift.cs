/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esus.cds.transport.generated.thrift.avaliacaoelegibilidade
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaAvaliacaoElegibilidadeThrift : TBase
  {
    private int _tpCdsOrigem;
    private string _numeroCartaoSus;
    private string _nomeCidadao;
    private string _nomeSocialCidadao;
    private long _dataNascimentoCidadao;
    private long _sexoCidadao;
    private long _racaCorCidadao;
    private string _nomeMaeCidadao;
    private bool _desconheceNomeMae;
    private string _codigoIbgeMunicipioNascimento;
    private long _codigoNacionalidade;
    private string _emailCidadao;
    private string _numeroNisPisPasep;
    private br.gov.saude.esus.cds.transport.generated.thrift.common.EnderecoLocalPermanenciaThrift _endereco;
    private long _atencaoDomiciliarOrigem;
    private long _atencaoDomiciliarModalidade;
    private List<long> _situacoesPresentes;
    private string _cid10Principal;
    private string _cid10Segundo;
    private string _cid10Terceiro;
    private long _conclusaoDestinoElegivel;
    private List<long> _conclusaoDestinoInelegivel;
    private long _cuidadorCidadao;

    public string UuidFicha { get; set; }

    public int TpCdsOrigem
    {
      get
      {
        return _tpCdsOrigem;
      }
      set
      {
        __isset.tpCdsOrigem = true;
        this._tpCdsOrigem = value;
      }
    }

    public br.gov.saude.esus.cds.transport.generated.thrift.common.UnicaLotacaoHeaderThrift HeaderTransport { get; set; }

    public string NumeroCartaoSus
    {
      get
      {
        return _numeroCartaoSus;
      }
      set
      {
        __isset.numeroCartaoSus = true;
        this._numeroCartaoSus = value;
      }
    }

    public string NomeCidadao
    {
      get
      {
        return _nomeCidadao;
      }
      set
      {
        __isset.nomeCidadao = true;
        this._nomeCidadao = value;
      }
    }

    public string NomeSocialCidadao
    {
      get
      {
        return _nomeSocialCidadao;
      }
      set
      {
        __isset.nomeSocialCidadao = true;
        this._nomeSocialCidadao = value;
      }
    }

    public long DataNascimentoCidadao
    {
      get
      {
        return _dataNascimentoCidadao;
      }
      set
      {
        __isset.dataNascimentoCidadao = true;
        this._dataNascimentoCidadao = value;
      }
    }

    public long SexoCidadao
    {
      get
      {
        return _sexoCidadao;
      }
      set
      {
        __isset.sexoCidadao = true;
        this._sexoCidadao = value;
      }
    }

    public long RacaCorCidadao
    {
      get
      {
        return _racaCorCidadao;
      }
      set
      {
        __isset.racaCorCidadao = true;
        this._racaCorCidadao = value;
      }
    }

    public string NomeMaeCidadao
    {
      get
      {
        return _nomeMaeCidadao;
      }
      set
      {
        __isset.nomeMaeCidadao = true;
        this._nomeMaeCidadao = value;
      }
    }

    public bool DesconheceNomeMae
    {
      get
      {
        return _desconheceNomeMae;
      }
      set
      {
        __isset.desconheceNomeMae = true;
        this._desconheceNomeMae = value;
      }
    }

    public string CodigoIbgeMunicipioNascimento
    {
      get
      {
        return _codigoIbgeMunicipioNascimento;
      }
      set
      {
        __isset.codigoIbgeMunicipioNascimento = true;
        this._codigoIbgeMunicipioNascimento = value;
      }
    }

    public long CodigoNacionalidade
    {
      get
      {
        return _codigoNacionalidade;
      }
      set
      {
        __isset.codigoNacionalidade = true;
        this._codigoNacionalidade = value;
      }
    }

    public string EmailCidadao
    {
      get
      {
        return _emailCidadao;
      }
      set
      {
        __isset.emailCidadao = true;
        this._emailCidadao = value;
      }
    }

    public string NumeroNisPisPasep
    {
      get
      {
        return _numeroNisPisPasep;
      }
      set
      {
        __isset.numeroNisPisPasep = true;
        this._numeroNisPisPasep = value;
      }
    }

    public br.gov.saude.esus.cds.transport.generated.thrift.common.EnderecoLocalPermanenciaThrift Endereco
    {
      get
      {
        return _endereco;
      }
      set
      {
        __isset.endereco = true;
        this._endereco = value;
      }
    }

    public long AtencaoDomiciliarOrigem
    {
      get
      {
        return _atencaoDomiciliarOrigem;
      }
      set
      {
        __isset.atencaoDomiciliarOrigem = true;
        this._atencaoDomiciliarOrigem = value;
      }
    }

    public long AtencaoDomiciliarModalidade
    {
      get
      {
        return _atencaoDomiciliarModalidade;
      }
      set
      {
        __isset.atencaoDomiciliarModalidade = true;
        this._atencaoDomiciliarModalidade = value;
      }
    }

    public List<long> SituacoesPresentes
    {
      get
      {
        return _situacoesPresentes;
      }
      set
      {
        __isset.situacoesPresentes = true;
        this._situacoesPresentes = value;
      }
    }

    public string Cid10Principal
    {
      get
      {
        return _cid10Principal;
      }
      set
      {
        __isset.cid10Principal = true;
        this._cid10Principal = value;
      }
    }

    public string Cid10Segundo
    {
      get
      {
        return _cid10Segundo;
      }
      set
      {
        __isset.cid10Segundo = true;
        this._cid10Segundo = value;
      }
    }

    public string Cid10Terceiro
    {
      get
      {
        return _cid10Terceiro;
      }
      set
      {
        __isset.cid10Terceiro = true;
        this._cid10Terceiro = value;
      }
    }

    public long ConclusaoDestinoElegivel
    {
      get
      {
        return _conclusaoDestinoElegivel;
      }
      set
      {
        __isset.conclusaoDestinoElegivel = true;
        this._conclusaoDestinoElegivel = value;
      }
    }

    public List<long> ConclusaoDestinoInelegivel
    {
      get
      {
        return _conclusaoDestinoInelegivel;
      }
      set
      {
        __isset.conclusaoDestinoInelegivel = true;
        this._conclusaoDestinoInelegivel = value;
      }
    }

    public long CuidadorCidadao
    {
      get
      {
        return _cuidadorCidadao;
      }
      set
      {
        __isset.cuidadorCidadao = true;
        this._cuidadorCidadao = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tpCdsOrigem;
      public bool numeroCartaoSus;
      public bool nomeCidadao;
      public bool nomeSocialCidadao;
      public bool dataNascimentoCidadao;
      public bool sexoCidadao;
      public bool racaCorCidadao;
      public bool nomeMaeCidadao;
      public bool desconheceNomeMae;
      public bool codigoIbgeMunicipioNascimento;
      public bool codigoNacionalidade;
      public bool emailCidadao;
      public bool numeroNisPisPasep;
      public bool endereco;
      public bool atencaoDomiciliarOrigem;
      public bool atencaoDomiciliarModalidade;
      public bool situacoesPresentes;
      public bool cid10Principal;
      public bool cid10Segundo;
      public bool cid10Terceiro;
      public bool conclusaoDestinoElegivel;
      public bool conclusaoDestinoInelegivel;
      public bool cuidadorCidadao;
    }

    public FichaAvaliacaoElegibilidadeThrift() {
    }

    public FichaAvaliacaoElegibilidadeThrift(string uuidFicha, br.gov.saude.esus.cds.transport.generated.thrift.common.UnicaLotacaoHeaderThrift headerTransport) : this() {
      this.UuidFicha = uuidFicha;
      this.HeaderTransport = headerTransport;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_uuidFicha = false;
      bool isset_headerTransport = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UuidFicha = iprot.ReadString();
              isset_uuidFicha = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TpCdsOrigem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              HeaderTransport = new br.gov.saude.esus.cds.transport.generated.thrift.common.UnicaLotacaoHeaderThrift();
              HeaderTransport.Read(iprot);
              isset_headerTransport = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              NumeroCartaoSus = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              NomeCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              NomeSocialCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              DataNascimentoCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              SexoCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              RacaCorCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              NomeMaeCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              DesconheceNomeMae = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              CodigoIbgeMunicipioNascimento = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              CodigoNacionalidade = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              EmailCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              NumeroNisPisPasep = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Struct) {
              Endereco = new br.gov.saude.esus.cds.transport.generated.thrift.common.EnderecoLocalPermanenciaThrift();
              Endereco.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I64) {
              AtencaoDomiciliarOrigem = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I64) {
              AtencaoDomiciliarModalidade = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.List) {
              {
                SituacoesPresentes = new List<long>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  long _elem2;
                  _elem2 = iprot.ReadI64();
                  SituacoesPresentes.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              Cid10Principal = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              Cid10Segundo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.String) {
              Cid10Terceiro = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I64) {
              ConclusaoDestinoElegivel = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.List) {
              {
                ConclusaoDestinoInelegivel = new List<long>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  long _elem5;
                  _elem5 = iprot.ReadI64();
                  ConclusaoDestinoInelegivel.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I64) {
              CuidadorCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_uuidFicha)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_headerTransport)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FichaAvaliacaoElegibilidadeThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "uuidFicha";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(UuidFicha);
      oprot.WriteFieldEnd();
      if (__isset.tpCdsOrigem) {
        field.Name = "tpCdsOrigem";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TpCdsOrigem);
        oprot.WriteFieldEnd();
      }
      field.Name = "headerTransport";
      field.Type = TType.Struct;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      HeaderTransport.Write(oprot);
      oprot.WriteFieldEnd();
      if (NumeroCartaoSus != null && __isset.numeroCartaoSus) {
        field.Name = "numeroCartaoSus";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NumeroCartaoSus);
        oprot.WriteFieldEnd();
      }
      if (NomeCidadao != null && __isset.nomeCidadao) {
        field.Name = "nomeCidadao";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NomeCidadao);
        oprot.WriteFieldEnd();
      }
      if (NomeSocialCidadao != null && __isset.nomeSocialCidadao) {
        field.Name = "nomeSocialCidadao";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NomeSocialCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataNascimentoCidadao) {
        field.Name = "dataNascimentoCidadao";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataNascimentoCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.sexoCidadao) {
        field.Name = "sexoCidadao";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SexoCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.racaCorCidadao) {
        field.Name = "racaCorCidadao";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RacaCorCidadao);
        oprot.WriteFieldEnd();
      }
      if (NomeMaeCidadao != null && __isset.nomeMaeCidadao) {
        field.Name = "nomeMaeCidadao";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NomeMaeCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.desconheceNomeMae) {
        field.Name = "desconheceNomeMae";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DesconheceNomeMae);
        oprot.WriteFieldEnd();
      }
      if (CodigoIbgeMunicipioNascimento != null && __isset.codigoIbgeMunicipioNascimento) {
        field.Name = "codigoIbgeMunicipioNascimento";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CodigoIbgeMunicipioNascimento);
        oprot.WriteFieldEnd();
      }
      if (__isset.codigoNacionalidade) {
        field.Name = "codigoNacionalidade";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CodigoNacionalidade);
        oprot.WriteFieldEnd();
      }
      if (EmailCidadao != null && __isset.emailCidadao) {
        field.Name = "emailCidadao";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EmailCidadao);
        oprot.WriteFieldEnd();
      }
      if (NumeroNisPisPasep != null && __isset.numeroNisPisPasep) {
        field.Name = "numeroNisPisPasep";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NumeroNisPisPasep);
        oprot.WriteFieldEnd();
      }
      if (Endereco != null && __isset.endereco) {
        field.Name = "endereco";
        field.Type = TType.Struct;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        Endereco.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.atencaoDomiciliarOrigem) {
        field.Name = "atencaoDomiciliarOrigem";
        field.Type = TType.I64;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AtencaoDomiciliarOrigem);
        oprot.WriteFieldEnd();
      }
      if (__isset.atencaoDomiciliarModalidade) {
        field.Name = "atencaoDomiciliarModalidade";
        field.Type = TType.I64;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AtencaoDomiciliarModalidade);
        oprot.WriteFieldEnd();
      }
      if (SituacoesPresentes != null && __isset.situacoesPresentes) {
        field.Name = "situacoesPresentes";
        field.Type = TType.List;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, SituacoesPresentes.Count));
          foreach (long _iter6 in SituacoesPresentes)
          {
            oprot.WriteI64(_iter6);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cid10Principal != null && __isset.cid10Principal) {
        field.Name = "cid10Principal";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cid10Principal);
        oprot.WriteFieldEnd();
      }
      if (Cid10Segundo != null && __isset.cid10Segundo) {
        field.Name = "cid10Segundo";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cid10Segundo);
        oprot.WriteFieldEnd();
      }
      if (Cid10Terceiro != null && __isset.cid10Terceiro) {
        field.Name = "cid10Terceiro";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cid10Terceiro);
        oprot.WriteFieldEnd();
      }
      if (__isset.conclusaoDestinoElegivel) {
        field.Name = "conclusaoDestinoElegivel";
        field.Type = TType.I64;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ConclusaoDestinoElegivel);
        oprot.WriteFieldEnd();
      }
      if (ConclusaoDestinoInelegivel != null && __isset.conclusaoDestinoInelegivel) {
        field.Name = "conclusaoDestinoInelegivel";
        field.Type = TType.List;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, ConclusaoDestinoInelegivel.Count));
          foreach (long _iter7 in ConclusaoDestinoInelegivel)
          {
            oprot.WriteI64(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.cuidadorCidadao) {
        field.Name = "cuidadorCidadao";
        field.Type = TType.I64;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CuidadorCidadao);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaAvaliacaoElegibilidadeThrift(");
      __sb.Append(", UuidFicha: ");
      __sb.Append(UuidFicha);
      if (__isset.tpCdsOrigem) {
        __sb.Append(", TpCdsOrigem: ");
        __sb.Append(TpCdsOrigem);
      }
      __sb.Append(", HeaderTransport: ");
      __sb.Append(HeaderTransport== null ? "<null>" : HeaderTransport.ToString());
      if (NumeroCartaoSus != null && __isset.numeroCartaoSus) {
        __sb.Append(", NumeroCartaoSus: ");
        __sb.Append(NumeroCartaoSus);
      }
      if (NomeCidadao != null && __isset.nomeCidadao) {
        __sb.Append(", NomeCidadao: ");
        __sb.Append(NomeCidadao);
      }
      if (NomeSocialCidadao != null && __isset.nomeSocialCidadao) {
        __sb.Append(", NomeSocialCidadao: ");
        __sb.Append(NomeSocialCidadao);
      }
      if (__isset.dataNascimentoCidadao) {
        __sb.Append(", DataNascimentoCidadao: ");
        __sb.Append(DataNascimentoCidadao);
      }
      if (__isset.sexoCidadao) {
        __sb.Append(", SexoCidadao: ");
        __sb.Append(SexoCidadao);
      }
      if (__isset.racaCorCidadao) {
        __sb.Append(", RacaCorCidadao: ");
        __sb.Append(RacaCorCidadao);
      }
      if (NomeMaeCidadao != null && __isset.nomeMaeCidadao) {
        __sb.Append(", NomeMaeCidadao: ");
        __sb.Append(NomeMaeCidadao);
      }
      if (__isset.desconheceNomeMae) {
        __sb.Append(", DesconheceNomeMae: ");
        __sb.Append(DesconheceNomeMae);
      }
      if (CodigoIbgeMunicipioNascimento != null && __isset.codigoIbgeMunicipioNascimento) {
        __sb.Append(", CodigoIbgeMunicipioNascimento: ");
        __sb.Append(CodigoIbgeMunicipioNascimento);
      }
      if (__isset.codigoNacionalidade) {
        __sb.Append(", CodigoNacionalidade: ");
        __sb.Append(CodigoNacionalidade);
      }
      if (EmailCidadao != null && __isset.emailCidadao) {
        __sb.Append(", EmailCidadao: ");
        __sb.Append(EmailCidadao);
      }
      if (NumeroNisPisPasep != null && __isset.numeroNisPisPasep) {
        __sb.Append(", NumeroNisPisPasep: ");
        __sb.Append(NumeroNisPisPasep);
      }
      if (Endereco != null && __isset.endereco) {
        __sb.Append(", Endereco: ");
        __sb.Append(Endereco== null ? "<null>" : Endereco.ToString());
      }
      if (__isset.atencaoDomiciliarOrigem) {
        __sb.Append(", AtencaoDomiciliarOrigem: ");
        __sb.Append(AtencaoDomiciliarOrigem);
      }
      if (__isset.atencaoDomiciliarModalidade) {
        __sb.Append(", AtencaoDomiciliarModalidade: ");
        __sb.Append(AtencaoDomiciliarModalidade);
      }
      if (SituacoesPresentes != null && __isset.situacoesPresentes) {
        __sb.Append(", SituacoesPresentes: ");
        __sb.Append(SituacoesPresentes);
      }
      if (Cid10Principal != null && __isset.cid10Principal) {
        __sb.Append(", Cid10Principal: ");
        __sb.Append(Cid10Principal);
      }
      if (Cid10Segundo != null && __isset.cid10Segundo) {
        __sb.Append(", Cid10Segundo: ");
        __sb.Append(Cid10Segundo);
      }
      if (Cid10Terceiro != null && __isset.cid10Terceiro) {
        __sb.Append(", Cid10Terceiro: ");
        __sb.Append(Cid10Terceiro);
      }
      if (__isset.conclusaoDestinoElegivel) {
        __sb.Append(", ConclusaoDestinoElegivel: ");
        __sb.Append(ConclusaoDestinoElegivel);
      }
      if (ConclusaoDestinoInelegivel != null && __isset.conclusaoDestinoInelegivel) {
        __sb.Append(", ConclusaoDestinoInelegivel: ");
        __sb.Append(ConclusaoDestinoInelegivel);
      }
      if (__isset.cuidadorCidadao) {
        __sb.Append(", CuidadorCidadao: ");
        __sb.Append(CuidadorCidadao);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

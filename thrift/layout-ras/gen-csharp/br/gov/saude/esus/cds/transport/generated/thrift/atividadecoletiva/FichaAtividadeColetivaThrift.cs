/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esus.cds.transport.generated.thrift.atividadecoletiva
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaAtividadeColetivaThrift : TBase
  {
    private long _dtAtividadeColetiva;
    private int _numParticipantesProgramados;
    private string _localAtividade;
    private long _horaInicio;
    private long _horaFim;
    private long _inep;
    private string _responsavelCns;
    private string _responsavelNumIne;
    private int _numParticipantes;
    private int _numAvaliacoesAlteradas;
    private List<ProfissionalCboRowItemThrift> _profissionais;
    private long _atividadeTipo;
    private List<long> _temasParaReuniao;
    private List<long> _publicoAlvo;
    private List<long> _praticasTemasParaSaude;
    private List<ParticipanteRowItemThrift> _participantes;
    private int _tbCdsOrigem;
    private string _codigoIbgeMunicipio;

    public string UuidFicha { get; set; }

    public long DtAtividadeColetiva
    {
      get
      {
        return _dtAtividadeColetiva;
      }
      set
      {
        __isset.dtAtividadeColetiva = true;
        this._dtAtividadeColetiva = value;
      }
    }

    public int NumParticipantesProgramados
    {
      get
      {
        return _numParticipantesProgramados;
      }
      set
      {
        __isset.numParticipantesProgramados = true;
        this._numParticipantesProgramados = value;
      }
    }

    public string LocalAtividade
    {
      get
      {
        return _localAtividade;
      }
      set
      {
        __isset.localAtividade = true;
        this._localAtividade = value;
      }
    }

    public long HoraInicio
    {
      get
      {
        return _horaInicio;
      }
      set
      {
        __isset.horaInicio = true;
        this._horaInicio = value;
      }
    }

    public long HoraFim
    {
      get
      {
        return _horaFim;
      }
      set
      {
        __isset.horaFim = true;
        this._horaFim = value;
      }
    }

    public long Inep
    {
      get
      {
        return _inep;
      }
      set
      {
        __isset.inep = true;
        this._inep = value;
      }
    }

    public string ResponsavelCns
    {
      get
      {
        return _responsavelCns;
      }
      set
      {
        __isset.responsavelCns = true;
        this._responsavelCns = value;
      }
    }

    public string ResponsavelCnesUnidade { get; set; }

    public string ResponsavelNumIne
    {
      get
      {
        return _responsavelNumIne;
      }
      set
      {
        __isset.responsavelNumIne = true;
        this._responsavelNumIne = value;
      }
    }

    public int NumParticipantes
    {
      get
      {
        return _numParticipantes;
      }
      set
      {
        __isset.numParticipantes = true;
        this._numParticipantes = value;
      }
    }

    public int NumAvaliacoesAlteradas
    {
      get
      {
        return _numAvaliacoesAlteradas;
      }
      set
      {
        __isset.numAvaliacoesAlteradas = true;
        this._numAvaliacoesAlteradas = value;
      }
    }

    public List<ProfissionalCboRowItemThrift> Profissionais
    {
      get
      {
        return _profissionais;
      }
      set
      {
        __isset.profissionais = true;
        this._profissionais = value;
      }
    }

    public long AtividadeTipo
    {
      get
      {
        return _atividadeTipo;
      }
      set
      {
        __isset.atividadeTipo = true;
        this._atividadeTipo = value;
      }
    }

    public List<long> TemasParaReuniao
    {
      get
      {
        return _temasParaReuniao;
      }
      set
      {
        __isset.temasParaReuniao = true;
        this._temasParaReuniao = value;
      }
    }

    public List<long> PublicoAlvo
    {
      get
      {
        return _publicoAlvo;
      }
      set
      {
        __isset.publicoAlvo = true;
        this._publicoAlvo = value;
      }
    }

    public List<long> PraticasTemasParaSaude
    {
      get
      {
        return _praticasTemasParaSaude;
      }
      set
      {
        __isset.praticasTemasParaSaude = true;
        this._praticasTemasParaSaude = value;
      }
    }

    public List<ParticipanteRowItemThrift> Participantes
    {
      get
      {
        return _participantes;
      }
      set
      {
        __isset.participantes = true;
        this._participantes = value;
      }
    }

    public int TbCdsOrigem
    {
      get
      {
        return _tbCdsOrigem;
      }
      set
      {
        __isset.tbCdsOrigem = true;
        this._tbCdsOrigem = value;
      }
    }

    public string CodigoIbgeMunicipio
    {
      get
      {
        return _codigoIbgeMunicipio;
      }
      set
      {
        __isset.codigoIbgeMunicipio = true;
        this._codigoIbgeMunicipio = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dtAtividadeColetiva;
      public bool numParticipantesProgramados;
      public bool localAtividade;
      public bool horaInicio;
      public bool horaFim;
      public bool inep;
      public bool responsavelCns;
      public bool responsavelNumIne;
      public bool numParticipantes;
      public bool numAvaliacoesAlteradas;
      public bool profissionais;
      public bool atividadeTipo;
      public bool temasParaReuniao;
      public bool publicoAlvo;
      public bool praticasTemasParaSaude;
      public bool participantes;
      public bool tbCdsOrigem;
      public bool codigoIbgeMunicipio;
    }

    public FichaAtividadeColetivaThrift() {
    }

    public FichaAtividadeColetivaThrift(string uuidFicha, string responsavelCnesUnidade) : this() {
      this.UuidFicha = uuidFicha;
      this.ResponsavelCnesUnidade = responsavelCnesUnidade;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_uuidFicha = false;
      bool isset_responsavelCnesUnidade = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UuidFicha = iprot.ReadString();
              isset_uuidFicha = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              DtAtividadeColetiva = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              NumParticipantesProgramados = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              LocalAtividade = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              HoraInicio = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              HoraFim = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              Inep = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              ResponsavelCns = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              ResponsavelCnesUnidade = iprot.ReadString();
              isset_responsavelCnesUnidade = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              ResponsavelNumIne = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              NumParticipantes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              NumAvaliacoesAlteradas = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                Profissionais = new List<ProfissionalCboRowItemThrift>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  ProfissionalCboRowItemThrift _elem2;
                  _elem2 = new ProfissionalCboRowItemThrift();
                  _elem2.Read(iprot);
                  Profissionais.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              AtividadeTipo = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                TemasParaReuniao = new List<long>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  long _elem5;
                  _elem5 = iprot.ReadI64();
                  TemasParaReuniao.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.List) {
              {
                PublicoAlvo = new List<long>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  long _elem8;
                  _elem8 = iprot.ReadI64();
                  PublicoAlvo.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.List) {
              {
                PraticasTemasParaSaude = new List<long>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  long _elem11;
                  _elem11 = iprot.ReadI64();
                  PraticasTemasParaSaude.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.List) {
              {
                Participantes = new List<ParticipanteRowItemThrift>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  ParticipanteRowItemThrift _elem14;
                  _elem14 = new ParticipanteRowItemThrift();
                  _elem14.Read(iprot);
                  Participantes.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              TbCdsOrigem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              CodigoIbgeMunicipio = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_uuidFicha)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_responsavelCnesUnidade)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FichaAtividadeColetivaThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "uuidFicha";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(UuidFicha);
      oprot.WriteFieldEnd();
      if (__isset.dtAtividadeColetiva) {
        field.Name = "dtAtividadeColetiva";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DtAtividadeColetiva);
        oprot.WriteFieldEnd();
      }
      if (__isset.numParticipantesProgramados) {
        field.Name = "numParticipantesProgramados";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumParticipantesProgramados);
        oprot.WriteFieldEnd();
      }
      if (LocalAtividade != null && __isset.localAtividade) {
        field.Name = "localAtividade";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LocalAtividade);
        oprot.WriteFieldEnd();
      }
      if (__isset.horaInicio) {
        field.Name = "horaInicio";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(HoraInicio);
        oprot.WriteFieldEnd();
      }
      if (__isset.horaFim) {
        field.Name = "horaFim";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(HoraFim);
        oprot.WriteFieldEnd();
      }
      if (__isset.inep) {
        field.Name = "inep";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Inep);
        oprot.WriteFieldEnd();
      }
      if (ResponsavelCns != null && __isset.responsavelCns) {
        field.Name = "responsavelCns";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ResponsavelCns);
        oprot.WriteFieldEnd();
      }
      field.Name = "responsavelCnesUnidade";
      field.Type = TType.String;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ResponsavelCnesUnidade);
      oprot.WriteFieldEnd();
      if (ResponsavelNumIne != null && __isset.responsavelNumIne) {
        field.Name = "responsavelNumIne";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ResponsavelNumIne);
        oprot.WriteFieldEnd();
      }
      if (__isset.numParticipantes) {
        field.Name = "numParticipantes";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumParticipantes);
        oprot.WriteFieldEnd();
      }
      if (__isset.numAvaliacoesAlteradas) {
        field.Name = "numAvaliacoesAlteradas";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumAvaliacoesAlteradas);
        oprot.WriteFieldEnd();
      }
      if (Profissionais != null && __isset.profissionais) {
        field.Name = "profissionais";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Profissionais.Count));
          foreach (ProfissionalCboRowItemThrift _iter15 in Profissionais)
          {
            _iter15.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.atividadeTipo) {
        field.Name = "atividadeTipo";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AtividadeTipo);
        oprot.WriteFieldEnd();
      }
      if (TemasParaReuniao != null && __isset.temasParaReuniao) {
        field.Name = "temasParaReuniao";
        field.Type = TType.List;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, TemasParaReuniao.Count));
          foreach (long _iter16 in TemasParaReuniao)
          {
            oprot.WriteI64(_iter16);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PublicoAlvo != null && __isset.publicoAlvo) {
        field.Name = "publicoAlvo";
        field.Type = TType.List;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, PublicoAlvo.Count));
          foreach (long _iter17 in PublicoAlvo)
          {
            oprot.WriteI64(_iter17);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PraticasTemasParaSaude != null && __isset.praticasTemasParaSaude) {
        field.Name = "praticasTemasParaSaude";
        field.Type = TType.List;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, PraticasTemasParaSaude.Count));
          foreach (long _iter18 in PraticasTemasParaSaude)
          {
            oprot.WriteI64(_iter18);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Participantes != null && __isset.participantes) {
        field.Name = "participantes";
        field.Type = TType.List;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Participantes.Count));
          foreach (ParticipanteRowItemThrift _iter19 in Participantes)
          {
            _iter19.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.tbCdsOrigem) {
        field.Name = "tbCdsOrigem";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TbCdsOrigem);
        oprot.WriteFieldEnd();
      }
      if (CodigoIbgeMunicipio != null && __isset.codigoIbgeMunicipio) {
        field.Name = "codigoIbgeMunicipio";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CodigoIbgeMunicipio);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaAtividadeColetivaThrift(");
      __sb.Append(", UuidFicha: ");
      __sb.Append(UuidFicha);
      if (__isset.dtAtividadeColetiva) {
        __sb.Append(", DtAtividadeColetiva: ");
        __sb.Append(DtAtividadeColetiva);
      }
      if (__isset.numParticipantesProgramados) {
        __sb.Append(", NumParticipantesProgramados: ");
        __sb.Append(NumParticipantesProgramados);
      }
      if (LocalAtividade != null && __isset.localAtividade) {
        __sb.Append(", LocalAtividade: ");
        __sb.Append(LocalAtividade);
      }
      if (__isset.horaInicio) {
        __sb.Append(", HoraInicio: ");
        __sb.Append(HoraInicio);
      }
      if (__isset.horaFim) {
        __sb.Append(", HoraFim: ");
        __sb.Append(HoraFim);
      }
      if (__isset.inep) {
        __sb.Append(", Inep: ");
        __sb.Append(Inep);
      }
      if (ResponsavelCns != null && __isset.responsavelCns) {
        __sb.Append(", ResponsavelCns: ");
        __sb.Append(ResponsavelCns);
      }
      __sb.Append(", ResponsavelCnesUnidade: ");
      __sb.Append(ResponsavelCnesUnidade);
      if (ResponsavelNumIne != null && __isset.responsavelNumIne) {
        __sb.Append(", ResponsavelNumIne: ");
        __sb.Append(ResponsavelNumIne);
      }
      if (__isset.numParticipantes) {
        __sb.Append(", NumParticipantes: ");
        __sb.Append(NumParticipantes);
      }
      if (__isset.numAvaliacoesAlteradas) {
        __sb.Append(", NumAvaliacoesAlteradas: ");
        __sb.Append(NumAvaliacoesAlteradas);
      }
      if (Profissionais != null && __isset.profissionais) {
        __sb.Append(", Profissionais: ");
        __sb.Append(Profissionais);
      }
      if (__isset.atividadeTipo) {
        __sb.Append(", AtividadeTipo: ");
        __sb.Append(AtividadeTipo);
      }
      if (TemasParaReuniao != null && __isset.temasParaReuniao) {
        __sb.Append(", TemasParaReuniao: ");
        __sb.Append(TemasParaReuniao);
      }
      if (PublicoAlvo != null && __isset.publicoAlvo) {
        __sb.Append(", PublicoAlvo: ");
        __sb.Append(PublicoAlvo);
      }
      if (PraticasTemasParaSaude != null && __isset.praticasTemasParaSaude) {
        __sb.Append(", PraticasTemasParaSaude: ");
        __sb.Append(PraticasTemasParaSaude);
      }
      if (Participantes != null && __isset.participantes) {
        __sb.Append(", Participantes: ");
        __sb.Append(Participantes);
      }
      if (__isset.tbCdsOrigem) {
        __sb.Append(", TbCdsOrigem: ");
        __sb.Append(TbCdsOrigem);
      }
      if (CodigoIbgeMunicipio != null && __isset.codigoIbgeMunicipio) {
        __sb.Append(", CodigoIbgeMunicipio: ");
        __sb.Append(CodigoIbgeMunicipio);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

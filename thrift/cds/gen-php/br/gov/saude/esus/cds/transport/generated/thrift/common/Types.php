<?php
namespace br\gov\saude\esus\cds\transport\generated\thrift\common;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class HeaderCdsCadastroThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $cnesUnidadeSaude = null;
  /**
   * @var string
   */
  public $cnsProfissional = null;
  /**
   * @var string
   */
  public $codigoIbgeMunicipio = null;
  /**
   * @var int
   */
  public $dataAtendimento = null;
  /**
   * @var string
   */
  public $ineEquipe = null;
  /**
   * @var int
   */
  public $microarea = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cnesUnidadeSaude',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cnsProfissional',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'codigoIbgeMunicipio',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dataAtendimento',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'ineEquipe',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'microarea',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cnesUnidadeSaude'])) {
        $this->cnesUnidadeSaude = $vals['cnesUnidadeSaude'];
      }
      if (isset($vals['cnsProfissional'])) {
        $this->cnsProfissional = $vals['cnsProfissional'];
      }
      if (isset($vals['codigoIbgeMunicipio'])) {
        $this->codigoIbgeMunicipio = $vals['codigoIbgeMunicipio'];
      }
      if (isset($vals['dataAtendimento'])) {
        $this->dataAtendimento = $vals['dataAtendimento'];
      }
      if (isset($vals['ineEquipe'])) {
        $this->ineEquipe = $vals['ineEquipe'];
      }
      if (isset($vals['microarea'])) {
        $this->microarea = $vals['microarea'];
      }
    }
  }

  public function getName() {
    return 'HeaderCdsCadastroThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnesUnidadeSaude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnsProfissional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigoIbgeMunicipio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataAtendimento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ineEquipe);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->microarea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HeaderCdsCadastroThrift');
    if ($this->cnesUnidadeSaude !== null) {
      $xfer += $output->writeFieldBegin('cnesUnidadeSaude', TType::STRING, 1);
      $xfer += $output->writeString($this->cnesUnidadeSaude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnsProfissional !== null) {
      $xfer += $output->writeFieldBegin('cnsProfissional', TType::STRING, 2);
      $xfer += $output->writeString($this->cnsProfissional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigoIbgeMunicipio !== null) {
      $xfer += $output->writeFieldBegin('codigoIbgeMunicipio', TType::STRING, 3);
      $xfer += $output->writeString($this->codigoIbgeMunicipio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataAtendimento !== null) {
      $xfer += $output->writeFieldBegin('dataAtendimento', TType::I64, 4);
      $xfer += $output->writeI64($this->dataAtendimento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ineEquipe !== null) {
      $xfer += $output->writeFieldBegin('ineEquipe', TType::STRING, 5);
      $xfer += $output->writeString($this->ineEquipe);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->microarea !== null) {
      $xfer += $output->writeFieldBegin('microarea', TType::I64, 6);
      $xfer += $output->writeI64($this->microarea);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Representa um profissional
 */
class UnicaLotacaoHeaderThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $profissionalCNS = null;
  /**
   * @var string
   */
  public $cboCodigo_2002 = null;
  /**
   * @var string
   */
  public $cnes = null;
  /**
   * @var string
   */
  public $ine = null;
  /**
   * @var int
   */
  public $dataAtendimento = null;
  /**
   * @var string
   */
  public $codigoIbgeMunicipio = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'profissionalCNS',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cboCodigo_2002',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cnes',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ine',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'dataAtendimento',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'codigoIbgeMunicipio',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['profissionalCNS'])) {
        $this->profissionalCNS = $vals['profissionalCNS'];
      }
      if (isset($vals['cboCodigo_2002'])) {
        $this->cboCodigo_2002 = $vals['cboCodigo_2002'];
      }
      if (isset($vals['cnes'])) {
        $this->cnes = $vals['cnes'];
      }
      if (isset($vals['ine'])) {
        $this->ine = $vals['ine'];
      }
      if (isset($vals['dataAtendimento'])) {
        $this->dataAtendimento = $vals['dataAtendimento'];
      }
      if (isset($vals['codigoIbgeMunicipio'])) {
        $this->codigoIbgeMunicipio = $vals['codigoIbgeMunicipio'];
      }
    }
  }

  public function getName() {
    return 'UnicaLotacaoHeaderThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profissionalCNS);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cboCodigo_2002);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ine);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataAtendimento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigoIbgeMunicipio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UnicaLotacaoHeaderThrift');
    if ($this->profissionalCNS !== null) {
      $xfer += $output->writeFieldBegin('profissionalCNS', TType::STRING, 1);
      $xfer += $output->writeString($this->profissionalCNS);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cboCodigo_2002 !== null) {
      $xfer += $output->writeFieldBegin('cboCodigo_2002', TType::STRING, 2);
      $xfer += $output->writeString($this->cboCodigo_2002);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnes !== null) {
      $xfer += $output->writeFieldBegin('cnes', TType::STRING, 3);
      $xfer += $output->writeString($this->cnes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ine !== null) {
      $xfer += $output->writeFieldBegin('ine', TType::STRING, 4);
      $xfer += $output->writeString($this->ine);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataAtendimento !== null) {
      $xfer += $output->writeFieldBegin('dataAtendimento', TType::I64, 5);
      $xfer += $output->writeI64($this->dataAtendimento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigoIbgeMunicipio !== null) {
      $xfer += $output->writeFieldBegin('codigoIbgeMunicipio', TType::STRING, 6);
      $xfer += $output->writeString($this->codigoIbgeMunicipio);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VariasLotacoesHeaderThrift {
  static $_TSPEC;

  /**
   * @var \br\gov\saude\esus\cds\transport\generated\thrift\common\UnicaLotacaoHeaderThrift
   */
  public $lotacaoForm = null;
  /**
   * @var string
   */
  public $profissionalCNS1 = null;
  /**
   * @var string
   */
  public $cboCodigo_2002_1 = null;
  /**
   * @var string
   */
  public $profissionalCNS2 = null;
  /**
   * @var string
   */
  public $cboCodigo_2002_2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotacaoForm',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esus\cds\transport\generated\thrift\common\UnicaLotacaoHeaderThrift',
          ),
        2 => array(
          'var' => 'profissionalCNS1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cboCodigo_2002_1',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'profissionalCNS2',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cboCodigo_2002_2',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotacaoForm'])) {
        $this->lotacaoForm = $vals['lotacaoForm'];
      }
      if (isset($vals['profissionalCNS1'])) {
        $this->profissionalCNS1 = $vals['profissionalCNS1'];
      }
      if (isset($vals['cboCodigo_2002_1'])) {
        $this->cboCodigo_2002_1 = $vals['cboCodigo_2002_1'];
      }
      if (isset($vals['profissionalCNS2'])) {
        $this->profissionalCNS2 = $vals['profissionalCNS2'];
      }
      if (isset($vals['cboCodigo_2002_2'])) {
        $this->cboCodigo_2002_2 = $vals['cboCodigo_2002_2'];
      }
    }
  }

  public function getName() {
    return 'VariasLotacoesHeaderThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->lotacaoForm = new \br\gov\saude\esus\cds\transport\generated\thrift\common\UnicaLotacaoHeaderThrift();
            $xfer += $this->lotacaoForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profissionalCNS1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cboCodigo_2002_1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profissionalCNS2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cboCodigo_2002_2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VariasLotacoesHeaderThrift');
    if ($this->lotacaoForm !== null) {
      if (!is_object($this->lotacaoForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lotacaoForm', TType::STRUCT, 1);
      $xfer += $this->lotacaoForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profissionalCNS1 !== null) {
      $xfer += $output->writeFieldBegin('profissionalCNS1', TType::STRING, 2);
      $xfer += $output->writeString($this->profissionalCNS1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cboCodigo_2002_1 !== null) {
      $xfer += $output->writeFieldBegin('cboCodigo_2002_1', TType::STRING, 3);
      $xfer += $output->writeString($this->cboCodigo_2002_1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profissionalCNS2 !== null) {
      $xfer += $output->writeFieldBegin('profissionalCNS2', TType::STRING, 4);
      $xfer += $output->writeString($this->profissionalCNS2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cboCodigo_2002_2 !== null) {
      $xfer += $output->writeFieldBegin('cboCodigo_2002_2', TType::STRING, 5);
      $xfer += $output->writeString($this->cboCodigo_2002_2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EnderecoLocalPermanenciaThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $bairro = null;
  /**
   * @var string
   */
  public $cep = null;
  /**
   * @var string
   */
  public $codigoIbgeMunicipio = null;
  /**
   * @var string
   */
  public $complemento = null;
  /**
   * @var string
   */
  public $nomeLogradouro = null;
  /**
   * @var string
   */
  public $numero = null;
  /**
   * @var string
   */
  public $numeroDneUf = null;
  /**
   * @var string
   */
  public $telReferencial = null;
  /**
   * @var string
   */
  public $telResidencial = null;
  /**
   * @var string
   */
  public $tipoLogradouroNumeroDne = null;
  /**
   * @var bool
   */
  public $stSemNumero = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bairro',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cep',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'codigoIbgeMunicipio',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'complemento',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'nomeLogradouro',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'numero',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'numeroDneUf',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'telReferencial',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'telResidencial',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'tipoLogradouroNumeroDne',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'stSemNumero',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bairro'])) {
        $this->bairro = $vals['bairro'];
      }
      if (isset($vals['cep'])) {
        $this->cep = $vals['cep'];
      }
      if (isset($vals['codigoIbgeMunicipio'])) {
        $this->codigoIbgeMunicipio = $vals['codigoIbgeMunicipio'];
      }
      if (isset($vals['complemento'])) {
        $this->complemento = $vals['complemento'];
      }
      if (isset($vals['nomeLogradouro'])) {
        $this->nomeLogradouro = $vals['nomeLogradouro'];
      }
      if (isset($vals['numero'])) {
        $this->numero = $vals['numero'];
      }
      if (isset($vals['numeroDneUf'])) {
        $this->numeroDneUf = $vals['numeroDneUf'];
      }
      if (isset($vals['telReferencial'])) {
        $this->telReferencial = $vals['telReferencial'];
      }
      if (isset($vals['telResidencial'])) {
        $this->telResidencial = $vals['telResidencial'];
      }
      if (isset($vals['tipoLogradouroNumeroDne'])) {
        $this->tipoLogradouroNumeroDne = $vals['tipoLogradouroNumeroDne'];
      }
      if (isset($vals['stSemNumero'])) {
        $this->stSemNumero = $vals['stSemNumero'];
      }
    }
  }

  public function getName() {
    return 'EnderecoLocalPermanenciaThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bairro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cep);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigoIbgeMunicipio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->complemento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeLogradouro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numero);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numeroDneUf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telReferencial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telResidencial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoLogradouroNumeroDne);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->stSemNumero);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EnderecoLocalPermanenciaThrift');
    if ($this->bairro !== null) {
      $xfer += $output->writeFieldBegin('bairro', TType::STRING, 1);
      $xfer += $output->writeString($this->bairro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cep !== null) {
      $xfer += $output->writeFieldBegin('cep', TType::STRING, 2);
      $xfer += $output->writeString($this->cep);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigoIbgeMunicipio !== null) {
      $xfer += $output->writeFieldBegin('codigoIbgeMunicipio', TType::STRING, 3);
      $xfer += $output->writeString($this->codigoIbgeMunicipio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->complemento !== null) {
      $xfer += $output->writeFieldBegin('complemento', TType::STRING, 4);
      $xfer += $output->writeString($this->complemento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomeLogradouro !== null) {
      $xfer += $output->writeFieldBegin('nomeLogradouro', TType::STRING, 5);
      $xfer += $output->writeString($this->nomeLogradouro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numero !== null) {
      $xfer += $output->writeFieldBegin('numero', TType::STRING, 6);
      $xfer += $output->writeString($this->numero);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numeroDneUf !== null) {
      $xfer += $output->writeFieldBegin('numeroDneUf', TType::STRING, 7);
      $xfer += $output->writeString($this->numeroDneUf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telReferencial !== null) {
      $xfer += $output->writeFieldBegin('telReferencial', TType::STRING, 8);
      $xfer += $output->writeString($this->telReferencial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telResidencial !== null) {
      $xfer += $output->writeFieldBegin('telResidencial', TType::STRING, 9);
      $xfer += $output->writeString($this->telResidencial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoLogradouroNumeroDne !== null) {
      $xfer += $output->writeFieldBegin('tipoLogradouroNumeroDne', TType::STRING, 10);
      $xfer += $output->writeString($this->tipoLogradouroNumeroDne);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stSemNumero !== null) {
      $xfer += $output->writeFieldBegin('stSemNumero', TType::BOOL, 11);
      $xfer += $output->writeBool($this->stSemNumero);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



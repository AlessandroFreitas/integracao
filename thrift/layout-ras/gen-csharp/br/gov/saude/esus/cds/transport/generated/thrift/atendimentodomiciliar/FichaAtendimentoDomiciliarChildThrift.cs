/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esus.cds.transport.generated.thrift.atendimentodomiciliar
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaAtendimentoDomiciliarChildThrift : TBase
  {
    private long _turno;
    private string _cns;
    private long _dataNascimento;
    private long _sexo;
    private long _localAtendimento;
    private long _atencaoDomiciliarModalidade;
    private long _tipoAtendimento;
    private List<long> _situacoesPresentes;
    private string _cid;
    private string _ciap;
    private List<string> _procedimentos;
    private List<string> _outrosProcedimentos;
    private long _condutaDesfecho;
    private bool _statusInicioAcompanhamentoPosObito;

    public long Turno
    {
      get
      {
        return _turno;
      }
      set
      {
        __isset.turno = true;
        this._turno = value;
      }
    }

    public string Cns
    {
      get
      {
        return _cns;
      }
      set
      {
        __isset.cns = true;
        this._cns = value;
      }
    }

    public long DataNascimento
    {
      get
      {
        return _dataNascimento;
      }
      set
      {
        __isset.dataNascimento = true;
        this._dataNascimento = value;
      }
    }

    public long Sexo
    {
      get
      {
        return _sexo;
      }
      set
      {
        __isset.sexo = true;
        this._sexo = value;
      }
    }

    public long LocalAtendimento
    {
      get
      {
        return _localAtendimento;
      }
      set
      {
        __isset.localAtendimento = true;
        this._localAtendimento = value;
      }
    }

    public long AtencaoDomiciliarModalidade
    {
      get
      {
        return _atencaoDomiciliarModalidade;
      }
      set
      {
        __isset.atencaoDomiciliarModalidade = true;
        this._atencaoDomiciliarModalidade = value;
      }
    }

    public long TipoAtendimento
    {
      get
      {
        return _tipoAtendimento;
      }
      set
      {
        __isset.tipoAtendimento = true;
        this._tipoAtendimento = value;
      }
    }

    public List<long> SituacoesPresentes
    {
      get
      {
        return _situacoesPresentes;
      }
      set
      {
        __isset.situacoesPresentes = true;
        this._situacoesPresentes = value;
      }
    }

    public string Cid
    {
      get
      {
        return _cid;
      }
      set
      {
        __isset.cid = true;
        this._cid = value;
      }
    }

    public string Ciap
    {
      get
      {
        return _ciap;
      }
      set
      {
        __isset.ciap = true;
        this._ciap = value;
      }
    }

    public List<string> Procedimentos
    {
      get
      {
        return _procedimentos;
      }
      set
      {
        __isset.procedimentos = true;
        this._procedimentos = value;
      }
    }

    public List<string> OutrosProcedimentos
    {
      get
      {
        return _outrosProcedimentos;
      }
      set
      {
        __isset.outrosProcedimentos = true;
        this._outrosProcedimentos = value;
      }
    }

    public long CondutaDesfecho
    {
      get
      {
        return _condutaDesfecho;
      }
      set
      {
        __isset.condutaDesfecho = true;
        this._condutaDesfecho = value;
      }
    }

    public bool StatusInicioAcompanhamentoPosObito
    {
      get
      {
        return _statusInicioAcompanhamentoPosObito;
      }
      set
      {
        __isset.statusInicioAcompanhamentoPosObito = true;
        this._statusInicioAcompanhamentoPosObito = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool turno;
      public bool cns;
      public bool dataNascimento;
      public bool sexo;
      public bool localAtendimento;
      public bool atencaoDomiciliarModalidade;
      public bool tipoAtendimento;
      public bool situacoesPresentes;
      public bool cid;
      public bool ciap;
      public bool procedimentos;
      public bool outrosProcedimentos;
      public bool condutaDesfecho;
      public bool statusInicioAcompanhamentoPosObito;
    }

    public FichaAtendimentoDomiciliarChildThrift() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Turno = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Cns = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              DataNascimento = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Sexo = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              LocalAtendimento = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              AtencaoDomiciliarModalidade = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              TipoAtendimento = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                SituacoesPresentes = new List<long>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  long _elem2;
                  _elem2 = iprot.ReadI64();
                  SituacoesPresentes.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Cid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Ciap = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                Procedimentos = new List<string>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  string _elem5;
                  _elem5 = iprot.ReadString();
                  Procedimentos.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                OutrosProcedimentos = new List<string>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  string _elem8;
                  _elem8 = iprot.ReadString();
                  OutrosProcedimentos.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              CondutaDesfecho = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Bool) {
              StatusInicioAcompanhamentoPosObito = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FichaAtendimentoDomiciliarChildThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.turno) {
        field.Name = "turno";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Turno);
        oprot.WriteFieldEnd();
      }
      if (Cns != null && __isset.cns) {
        field.Name = "cns";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cns);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataNascimento) {
        field.Name = "dataNascimento";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataNascimento);
        oprot.WriteFieldEnd();
      }
      if (__isset.sexo) {
        field.Name = "sexo";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Sexo);
        oprot.WriteFieldEnd();
      }
      if (__isset.localAtendimento) {
        field.Name = "localAtendimento";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LocalAtendimento);
        oprot.WriteFieldEnd();
      }
      if (__isset.atencaoDomiciliarModalidade) {
        field.Name = "atencaoDomiciliarModalidade";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AtencaoDomiciliarModalidade);
        oprot.WriteFieldEnd();
      }
      if (__isset.tipoAtendimento) {
        field.Name = "tipoAtendimento";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TipoAtendimento);
        oprot.WriteFieldEnd();
      }
      if (SituacoesPresentes != null && __isset.situacoesPresentes) {
        field.Name = "situacoesPresentes";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, SituacoesPresentes.Count));
          foreach (long _iter9 in SituacoesPresentes)
          {
            oprot.WriteI64(_iter9);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cid != null && __isset.cid) {
        field.Name = "cid";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cid);
        oprot.WriteFieldEnd();
      }
      if (Ciap != null && __isset.ciap) {
        field.Name = "ciap";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Ciap);
        oprot.WriteFieldEnd();
      }
      if (Procedimentos != null && __isset.procedimentos) {
        field.Name = "procedimentos";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Procedimentos.Count));
          foreach (string _iter10 in Procedimentos)
          {
            oprot.WriteString(_iter10);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OutrosProcedimentos != null && __isset.outrosProcedimentos) {
        field.Name = "outrosProcedimentos";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, OutrosProcedimentos.Count));
          foreach (string _iter11 in OutrosProcedimentos)
          {
            oprot.WriteString(_iter11);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.condutaDesfecho) {
        field.Name = "condutaDesfecho";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CondutaDesfecho);
        oprot.WriteFieldEnd();
      }
      if (__isset.statusInicioAcompanhamentoPosObito) {
        field.Name = "statusInicioAcompanhamentoPosObito";
        field.Type = TType.Bool;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(StatusInicioAcompanhamentoPosObito);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaAtendimentoDomiciliarChildThrift(");
      bool __first = true;
      if (__isset.turno) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Turno: ");
        __sb.Append(Turno);
      }
      if (Cns != null && __isset.cns) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cns: ");
        __sb.Append(Cns);
      }
      if (__isset.dataNascimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataNascimento: ");
        __sb.Append(DataNascimento);
      }
      if (__isset.sexo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sexo: ");
        __sb.Append(Sexo);
      }
      if (__isset.localAtendimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalAtendimento: ");
        __sb.Append(LocalAtendimento);
      }
      if (__isset.atencaoDomiciliarModalidade) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AtencaoDomiciliarModalidade: ");
        __sb.Append(AtencaoDomiciliarModalidade);
      }
      if (__isset.tipoAtendimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TipoAtendimento: ");
        __sb.Append(TipoAtendimento);
      }
      if (SituacoesPresentes != null && __isset.situacoesPresentes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SituacoesPresentes: ");
        __sb.Append(SituacoesPresentes);
      }
      if (Cid != null && __isset.cid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cid: ");
        __sb.Append(Cid);
      }
      if (Ciap != null && __isset.ciap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ciap: ");
        __sb.Append(Ciap);
      }
      if (Procedimentos != null && __isset.procedimentos) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Procedimentos: ");
        __sb.Append(Procedimentos);
      }
      if (OutrosProcedimentos != null && __isset.outrosProcedimentos) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OutrosProcedimentos: ");
        __sb.Append(OutrosProcedimentos);
      }
      if (__isset.condutaDesfecho) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CondutaDesfecho: ");
        __sb.Append(CondutaDesfecho);
      }
      if (__isset.statusInicioAcompanhamentoPosObito) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusInicioAcompanhamentoPosObito: ");
        __sb.Append(StatusInicioAcompanhamentoPosObito);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

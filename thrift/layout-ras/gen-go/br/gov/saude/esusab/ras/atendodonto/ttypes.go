// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package atendodonto

import (
	"br/gov/saude/esusab/ras/common"
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var GoUnusedProtection__ int

type ProcedimentoQuantidadeThrift struct {
	CoMsProcedimento *string `thrift:"coMsProcedimento,1" json:"coMsProcedimento"`
	Quantidade       *int32  `thrift:"quantidade,2" json:"quantidade"`
}

func NewProcedimentoQuantidadeThrift() *ProcedimentoQuantidadeThrift {
	return &ProcedimentoQuantidadeThrift{}
}

var ProcedimentoQuantidadeThrift_CoMsProcedimento_DEFAULT string

func (p *ProcedimentoQuantidadeThrift) GetCoMsProcedimento() string {
	if !p.IsSetCoMsProcedimento() {
		return ProcedimentoQuantidadeThrift_CoMsProcedimento_DEFAULT
	}
	return *p.CoMsProcedimento
}

var ProcedimentoQuantidadeThrift_Quantidade_DEFAULT int32

func (p *ProcedimentoQuantidadeThrift) GetQuantidade() int32 {
	if !p.IsSetQuantidade() {
		return ProcedimentoQuantidadeThrift_Quantidade_DEFAULT
	}
	return *p.Quantidade
}
func (p *ProcedimentoQuantidadeThrift) IsSetCoMsProcedimento() bool {
	return p.CoMsProcedimento != nil
}

func (p *ProcedimentoQuantidadeThrift) IsSetQuantidade() bool {
	return p.Quantidade != nil
}

func (p *ProcedimentoQuantidadeThrift) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProcedimentoQuantidadeThrift) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CoMsProcedimento = &v
	}
	return nil
}

func (p *ProcedimentoQuantidadeThrift) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Quantidade = &v
	}
	return nil
}

func (p *ProcedimentoQuantidadeThrift) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProcedimentoQuantidadeThrift"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProcedimentoQuantidadeThrift) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoMsProcedimento() {
		if err := oprot.WriteFieldBegin("coMsProcedimento", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:coMsProcedimento: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.CoMsProcedimento)); err != nil {
			return fmt.Errorf("%T.coMsProcedimento (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:coMsProcedimento: %s", p, err)
		}
	}
	return err
}

func (p *ProcedimentoQuantidadeThrift) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuantidade() {
		if err := oprot.WriteFieldBegin("quantidade", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:quantidade: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Quantidade)); err != nil {
			return fmt.Errorf("%T.quantidade (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:quantidade: %s", p, err)
		}
	}
	return err
}

func (p *ProcedimentoQuantidadeThrift) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcedimentoQuantidadeThrift(%+v)", *p)
}

type FichaAtendimentoOdontologicoChildThrift struct {
	DtNascimento              *int64                          `thrift:"dtNascimento,1" json:"dtNascimento"`
	CnsCidadao                *string                         `thrift:"cnsCidadao,2" json:"cnsCidadao"`
	NumProntuario             *string                         `thrift:"numProntuario,3" json:"numProntuario"`
	Gestante                  *bool                           `thrift:"gestante,4" json:"gestante"`
	NecessidadesEspeciais     *bool                           `thrift:"necessidadesEspeciais,5" json:"necessidadesEspeciais"`
	LocalAtendimento          *int64                          `thrift:"localAtendimento,6" json:"localAtendimento"`
	TipoAtendimento           *int64                          `thrift:"tipoAtendimento,7" json:"tipoAtendimento"`
	TiposEncamOdonto          []int64                         `thrift:"tiposEncamOdonto,8" json:"tiposEncamOdonto"`
	TiposFornecimOdonto       []int64                         `thrift:"tiposFornecimOdonto,9" json:"tiposFornecimOdonto"`
	TiposVigilanciaSaudeBucal []int64                         `thrift:"tiposVigilanciaSaudeBucal,10" json:"tiposVigilanciaSaudeBucal"`
	TiposConsultaOdonto       []int64                         `thrift:"tiposConsultaOdonto,11" json:"tiposConsultaOdonto"`
	ProcedimentosRealizados   []*ProcedimentoQuantidadeThrift `thrift:"procedimentosRealizados,12" json:"procedimentosRealizados"`
	OutrosSiaProcedimentos    []*ProcedimentoQuantidadeThrift `thrift:"outrosSiaProcedimentos,13" json:"outrosSiaProcedimentos"`
	Sexo                      *int64                          `thrift:"sexo,14" json:"sexo"`
	Turno                     *int64                          `thrift:"turno,15" json:"turno"`
}

func NewFichaAtendimentoOdontologicoChildThrift() *FichaAtendimentoOdontologicoChildThrift {
	return &FichaAtendimentoOdontologicoChildThrift{}
}

var FichaAtendimentoOdontologicoChildThrift_DtNascimento_DEFAULT int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetDtNascimento() int64 {
	if !p.IsSetDtNascimento() {
		return FichaAtendimentoOdontologicoChildThrift_DtNascimento_DEFAULT
	}
	return *p.DtNascimento
}

var FichaAtendimentoOdontologicoChildThrift_CnsCidadao_DEFAULT string

func (p *FichaAtendimentoOdontologicoChildThrift) GetCnsCidadao() string {
	if !p.IsSetCnsCidadao() {
		return FichaAtendimentoOdontologicoChildThrift_CnsCidadao_DEFAULT
	}
	return *p.CnsCidadao
}

var FichaAtendimentoOdontologicoChildThrift_NumProntuario_DEFAULT string

func (p *FichaAtendimentoOdontologicoChildThrift) GetNumProntuario() string {
	if !p.IsSetNumProntuario() {
		return FichaAtendimentoOdontologicoChildThrift_NumProntuario_DEFAULT
	}
	return *p.NumProntuario
}

var FichaAtendimentoOdontologicoChildThrift_Gestante_DEFAULT bool

func (p *FichaAtendimentoOdontologicoChildThrift) GetGestante() bool {
	if !p.IsSetGestante() {
		return FichaAtendimentoOdontologicoChildThrift_Gestante_DEFAULT
	}
	return *p.Gestante
}

var FichaAtendimentoOdontologicoChildThrift_NecessidadesEspeciais_DEFAULT bool

func (p *FichaAtendimentoOdontologicoChildThrift) GetNecessidadesEspeciais() bool {
	if !p.IsSetNecessidadesEspeciais() {
		return FichaAtendimentoOdontologicoChildThrift_NecessidadesEspeciais_DEFAULT
	}
	return *p.NecessidadesEspeciais
}

var FichaAtendimentoOdontologicoChildThrift_LocalAtendimento_DEFAULT int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetLocalAtendimento() int64 {
	if !p.IsSetLocalAtendimento() {
		return FichaAtendimentoOdontologicoChildThrift_LocalAtendimento_DEFAULT
	}
	return *p.LocalAtendimento
}

var FichaAtendimentoOdontologicoChildThrift_TipoAtendimento_DEFAULT int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetTipoAtendimento() int64 {
	if !p.IsSetTipoAtendimento() {
		return FichaAtendimentoOdontologicoChildThrift_TipoAtendimento_DEFAULT
	}
	return *p.TipoAtendimento
}

var FichaAtendimentoOdontologicoChildThrift_TiposEncamOdonto_DEFAULT []int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetTiposEncamOdonto() []int64 {
	return p.TiposEncamOdonto
}

var FichaAtendimentoOdontologicoChildThrift_TiposFornecimOdonto_DEFAULT []int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetTiposFornecimOdonto() []int64 {
	return p.TiposFornecimOdonto
}

var FichaAtendimentoOdontologicoChildThrift_TiposVigilanciaSaudeBucal_DEFAULT []int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetTiposVigilanciaSaudeBucal() []int64 {
	return p.TiposVigilanciaSaudeBucal
}

var FichaAtendimentoOdontologicoChildThrift_TiposConsultaOdonto_DEFAULT []int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetTiposConsultaOdonto() []int64 {
	return p.TiposConsultaOdonto
}

var FichaAtendimentoOdontologicoChildThrift_ProcedimentosRealizados_DEFAULT []*ProcedimentoQuantidadeThrift

func (p *FichaAtendimentoOdontologicoChildThrift) GetProcedimentosRealizados() []*ProcedimentoQuantidadeThrift {
	return p.ProcedimentosRealizados
}

var FichaAtendimentoOdontologicoChildThrift_OutrosSiaProcedimentos_DEFAULT []*ProcedimentoQuantidadeThrift

func (p *FichaAtendimentoOdontologicoChildThrift) GetOutrosSiaProcedimentos() []*ProcedimentoQuantidadeThrift {
	return p.OutrosSiaProcedimentos
}

var FichaAtendimentoOdontologicoChildThrift_Sexo_DEFAULT int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetSexo() int64 {
	if !p.IsSetSexo() {
		return FichaAtendimentoOdontologicoChildThrift_Sexo_DEFAULT
	}
	return *p.Sexo
}

var FichaAtendimentoOdontologicoChildThrift_Turno_DEFAULT int64

func (p *FichaAtendimentoOdontologicoChildThrift) GetTurno() int64 {
	if !p.IsSetTurno() {
		return FichaAtendimentoOdontologicoChildThrift_Turno_DEFAULT
	}
	return *p.Turno
}
func (p *FichaAtendimentoOdontologicoChildThrift) IsSetDtNascimento() bool {
	return p.DtNascimento != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetCnsCidadao() bool {
	return p.CnsCidadao != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetNumProntuario() bool {
	return p.NumProntuario != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetGestante() bool {
	return p.Gestante != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetNecessidadesEspeciais() bool {
	return p.NecessidadesEspeciais != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetLocalAtendimento() bool {
	return p.LocalAtendimento != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetTipoAtendimento() bool {
	return p.TipoAtendimento != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetTiposEncamOdonto() bool {
	return p.TiposEncamOdonto != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetTiposFornecimOdonto() bool {
	return p.TiposFornecimOdonto != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetTiposVigilanciaSaudeBucal() bool {
	return p.TiposVigilanciaSaudeBucal != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetTiposConsultaOdonto() bool {
	return p.TiposConsultaOdonto != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetProcedimentosRealizados() bool {
	return p.ProcedimentosRealizados != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetOutrosSiaProcedimentos() bool {
	return p.OutrosSiaProcedimentos != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetSexo() bool {
	return p.Sexo != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) IsSetTurno() bool {
	return p.Turno != nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DtNascimento = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CnsCidadao = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumProntuario = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Gestante = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.NecessidadesEspeciais = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.LocalAtendimento = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.TipoAtendimento = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.TiposEncamOdonto = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.TiposEncamOdonto = append(p.TiposEncamOdonto, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.TiposFornecimOdonto = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.TiposFornecimOdonto = append(p.TiposFornecimOdonto, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.TiposVigilanciaSaudeBucal = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.TiposVigilanciaSaudeBucal = append(p.TiposVigilanciaSaudeBucal, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.TiposConsultaOdonto = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem3 = v
		}
		p.TiposConsultaOdonto = append(p.TiposConsultaOdonto, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ProcedimentoQuantidadeThrift, 0, size)
	p.ProcedimentosRealizados = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &ProcedimentoQuantidadeThrift{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.ProcedimentosRealizados = append(p.ProcedimentosRealizados, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ProcedimentoQuantidadeThrift, 0, size)
	p.OutrosSiaProcedimentos = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &ProcedimentoQuantidadeThrift{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.OutrosSiaProcedimentos = append(p.OutrosSiaProcedimentos, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.Sexo = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.Turno = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FichaAtendimentoOdontologicoChildThrift"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDtNascimento() {
		if err := oprot.WriteFieldBegin("dtNascimento", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:dtNascimento: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.DtNascimento)); err != nil {
			return fmt.Errorf("%T.dtNascimento (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:dtNascimento: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCnsCidadao() {
		if err := oprot.WriteFieldBegin("cnsCidadao", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:cnsCidadao: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.CnsCidadao)); err != nil {
			return fmt.Errorf("%T.cnsCidadao (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:cnsCidadao: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumProntuario() {
		if err := oprot.WriteFieldBegin("numProntuario", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:numProntuario: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.NumProntuario)); err != nil {
			return fmt.Errorf("%T.numProntuario (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:numProntuario: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetGestante() {
		if err := oprot.WriteFieldBegin("gestante", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:gestante: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Gestante)); err != nil {
			return fmt.Errorf("%T.gestante (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:gestante: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNecessidadesEspeciais() {
		if err := oprot.WriteFieldBegin("necessidadesEspeciais", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:necessidadesEspeciais: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.NecessidadesEspeciais)); err != nil {
			return fmt.Errorf("%T.necessidadesEspeciais (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:necessidadesEspeciais: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalAtendimento() {
		if err := oprot.WriteFieldBegin("localAtendimento", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:localAtendimento: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.LocalAtendimento)); err != nil {
			return fmt.Errorf("%T.localAtendimento (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:localAtendimento: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTipoAtendimento() {
		if err := oprot.WriteFieldBegin("tipoAtendimento", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:tipoAtendimento: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TipoAtendimento)); err != nil {
			return fmt.Errorf("%T.tipoAtendimento (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:tipoAtendimento: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTiposEncamOdonto() {
		if err := oprot.WriteFieldBegin("tiposEncamOdonto", thrift.LIST, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:tiposEncamOdonto: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TiposEncamOdonto)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.TiposEncamOdonto {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:tiposEncamOdonto: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTiposFornecimOdonto() {
		if err := oprot.WriteFieldBegin("tiposFornecimOdonto", thrift.LIST, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:tiposFornecimOdonto: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TiposFornecimOdonto)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.TiposFornecimOdonto {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:tiposFornecimOdonto: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTiposVigilanciaSaudeBucal() {
		if err := oprot.WriteFieldBegin("tiposVigilanciaSaudeBucal", thrift.LIST, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:tiposVigilanciaSaudeBucal: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TiposVigilanciaSaudeBucal)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.TiposVigilanciaSaudeBucal {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:tiposVigilanciaSaudeBucal: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTiposConsultaOdonto() {
		if err := oprot.WriteFieldBegin("tiposConsultaOdonto", thrift.LIST, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:tiposConsultaOdonto: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TiposConsultaOdonto)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.TiposConsultaOdonto {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:tiposConsultaOdonto: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcedimentosRealizados() {
		if err := oprot.WriteFieldBegin("procedimentosRealizados", thrift.LIST, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:procedimentosRealizados: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProcedimentosRealizados)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.ProcedimentosRealizados {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:procedimentosRealizados: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutrosSiaProcedimentos() {
		if err := oprot.WriteFieldBegin("outrosSiaProcedimentos", thrift.LIST, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:outrosSiaProcedimentos: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OutrosSiaProcedimentos)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.OutrosSiaProcedimentos {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:outrosSiaProcedimentos: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSexo() {
		if err := oprot.WriteFieldBegin("sexo", thrift.I64, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:sexo: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Sexo)); err != nil {
			return fmt.Errorf("%T.sexo (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:sexo: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurno() {
		if err := oprot.WriteFieldBegin("turno", thrift.I64, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:turno: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Turno)); err != nil {
			return fmt.Errorf("%T.turno (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:turno: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoChildThrift) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FichaAtendimentoOdontologicoChildThrift(%+v)", *p)
}

type FichaAtendimentoOdontologicoMasterThrift struct {
	UuidFicha                 string                                     `thrift:"uuidFicha,1,required" json:"uuidFicha"`
	HeaderTransport           *common.VariasLotacoesHeaderThrift         `thrift:"headerTransport,2" json:"headerTransport"`
	AtendimentosOdontologicos []*FichaAtendimentoOdontologicoChildThrift `thrift:"atendimentosOdontologicos,3" json:"atendimentosOdontologicos"`
	TpCdsOrigem               *int32                                     `thrift:"tpCdsOrigem,4" json:"tpCdsOrigem"`
}

func NewFichaAtendimentoOdontologicoMasterThrift() *FichaAtendimentoOdontologicoMasterThrift {
	return &FichaAtendimentoOdontologicoMasterThrift{}
}

func (p *FichaAtendimentoOdontologicoMasterThrift) GetUuidFicha() string {
	return p.UuidFicha
}

var FichaAtendimentoOdontologicoMasterThrift_HeaderTransport_DEFAULT *common.VariasLotacoesHeaderThrift

func (p *FichaAtendimentoOdontologicoMasterThrift) GetHeaderTransport() *common.VariasLotacoesHeaderThrift {
	if !p.IsSetHeaderTransport() {
		return FichaAtendimentoOdontologicoMasterThrift_HeaderTransport_DEFAULT
	}
	return p.HeaderTransport
}

var FichaAtendimentoOdontologicoMasterThrift_AtendimentosOdontologicos_DEFAULT []*FichaAtendimentoOdontologicoChildThrift

func (p *FichaAtendimentoOdontologicoMasterThrift) GetAtendimentosOdontologicos() []*FichaAtendimentoOdontologicoChildThrift {
	return p.AtendimentosOdontologicos
}

var FichaAtendimentoOdontologicoMasterThrift_TpCdsOrigem_DEFAULT int32

func (p *FichaAtendimentoOdontologicoMasterThrift) GetTpCdsOrigem() int32 {
	if !p.IsSetTpCdsOrigem() {
		return FichaAtendimentoOdontologicoMasterThrift_TpCdsOrigem_DEFAULT
	}
	return *p.TpCdsOrigem
}
func (p *FichaAtendimentoOdontologicoMasterThrift) IsSetHeaderTransport() bool {
	return p.HeaderTransport != nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) IsSetAtendimentosOdontologicos() bool {
	return p.AtendimentosOdontologicos != nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) IsSetTpCdsOrigem() bool {
	return p.TpCdsOrigem != nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UuidFicha = v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) ReadField2(iprot thrift.TProtocol) error {
	p.HeaderTransport = &common.VariasLotacoesHeaderThrift{}
	if err := p.HeaderTransport.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HeaderTransport, err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FichaAtendimentoOdontologicoChildThrift, 0, size)
	p.AtendimentosOdontologicos = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &FichaAtendimentoOdontologicoChildThrift{}
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6, err)
		}
		p.AtendimentosOdontologicos = append(p.AtendimentosOdontologicos, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.TpCdsOrigem = &v
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FichaAtendimentoOdontologicoMasterThrift"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FichaAtendimentoOdontologicoMasterThrift) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uuidFicha", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uuidFicha: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UuidFicha)); err != nil {
		return fmt.Errorf("%T.uuidFicha (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uuidFicha: %s", p, err)
	}
	return err
}

func (p *FichaAtendimentoOdontologicoMasterThrift) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeaderTransport() {
		if err := oprot.WriteFieldBegin("headerTransport", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:headerTransport: %s", p, err)
		}
		if err := p.HeaderTransport.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.HeaderTransport, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:headerTransport: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoMasterThrift) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAtendimentosOdontologicos() {
		if err := oprot.WriteFieldBegin("atendimentosOdontologicos", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:atendimentosOdontologicos: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AtendimentosOdontologicos)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.AtendimentosOdontologicos {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:atendimentosOdontologicos: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoMasterThrift) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTpCdsOrigem() {
		if err := oprot.WriteFieldBegin("tpCdsOrigem", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:tpCdsOrigem: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TpCdsOrigem)); err != nil {
			return fmt.Errorf("%T.tpCdsOrigem (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:tpCdsOrigem: %s", p, err)
		}
	}
	return err
}

func (p *FichaAtendimentoOdontologicoMasterThrift) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FichaAtendimentoOdontologicoMasterThrift(%+v)", *p)
}

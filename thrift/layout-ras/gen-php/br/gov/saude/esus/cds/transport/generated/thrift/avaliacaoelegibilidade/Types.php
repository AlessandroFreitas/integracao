<?php
namespace br\gov\saude\esus\cds\transport\generated\thrift\avaliacaoelegibilidade;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class FichaAvaliacaoElegibilidadeThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $uuidFicha = null;
  /**
   * @var int
   */
  public $tpCdsOrigem = null;
  /**
   * @var \br\gov\saude\esus\cds\transport\generated\thrift\common\UnicaLotacaoHeaderThrift
   */
  public $headerTransport = null;
  /**
   * @var string
   */
  public $numeroCartaoSus = null;
  /**
   * @var string
   */
  public $nomeCidadao = null;
  /**
   * @var string
   */
  public $nomeSocialCidadao = null;
  /**
   * @var int
   */
  public $dataNascimentoCidadao = null;
  /**
   * @var int
   */
  public $sexoCidadao = null;
  /**
   * @var int
   */
  public $racaCorCidadao = null;
  /**
   * @var string
   */
  public $nomeMaeCidadao = null;
  /**
   * @var bool
   */
  public $desconheceNomeMae = null;
  /**
   * @var string
   */
  public $codigoIbgeMunicipioNascimento = null;
  /**
   * @var int
   */
  public $codigoNacionalidade = null;
  /**
   * @var string
   */
  public $emailCidadao = null;
  /**
   * @var string
   */
  public $numeroNisPisPasep = null;
  /**
   * @var \br\gov\saude\esus\cds\transport\generated\thrift\common\EnderecoLocalPermanenciaThrift
   */
  public $endereco = null;
  /**
   * @var int
   */
  public $atencaoDomiciliarOrigem = null;
  /**
   * @var int
   */
  public $atencaoDomiciliarModalidade = null;
  /**
   * @var int[]
   */
  public $situacoesPresentes = null;
  /**
   * @var string
   */
  public $cid10Principal = null;
  /**
   * @var string
   */
  public $cid10Segundo = null;
  /**
   * @var string
   */
  public $cid10Terceiro = null;
  /**
   * @var int
   */
  public $conclusaoDestinoElegivel = null;
  /**
   * @var int[]
   */
  public $conclusaoDestinoInelegivel = null;
  /**
   * @var int
   */
  public $cuidadorCidadao = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uuidFicha',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tpCdsOrigem',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'headerTransport',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esus\cds\transport\generated\thrift\common\UnicaLotacaoHeaderThrift',
          ),
        4 => array(
          'var' => 'numeroCartaoSus',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'nomeCidadao',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'nomeSocialCidadao',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'dataNascimentoCidadao',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'sexoCidadao',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'racaCorCidadao',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'nomeMaeCidadao',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'desconheceNomeMae',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'codigoIbgeMunicipioNascimento',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'codigoNacionalidade',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'emailCidadao',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'numeroNisPisPasep',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'endereco',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esus\cds\transport\generated\thrift\common\EnderecoLocalPermanenciaThrift',
          ),
        17 => array(
          'var' => 'atencaoDomiciliarOrigem',
          'type' => TType::I64,
          ),
        18 => array(
          'var' => 'atencaoDomiciliarModalidade',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'situacoesPresentes',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        20 => array(
          'var' => 'cid10Principal',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'cid10Segundo',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'cid10Terceiro',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'conclusaoDestinoElegivel',
          'type' => TType::I64,
          ),
        24 => array(
          'var' => 'conclusaoDestinoInelegivel',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        25 => array(
          'var' => 'cuidadorCidadao',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uuidFicha'])) {
        $this->uuidFicha = $vals['uuidFicha'];
      }
      if (isset($vals['tpCdsOrigem'])) {
        $this->tpCdsOrigem = $vals['tpCdsOrigem'];
      }
      if (isset($vals['headerTransport'])) {
        $this->headerTransport = $vals['headerTransport'];
      }
      if (isset($vals['numeroCartaoSus'])) {
        $this->numeroCartaoSus = $vals['numeroCartaoSus'];
      }
      if (isset($vals['nomeCidadao'])) {
        $this->nomeCidadao = $vals['nomeCidadao'];
      }
      if (isset($vals['nomeSocialCidadao'])) {
        $this->nomeSocialCidadao = $vals['nomeSocialCidadao'];
      }
      if (isset($vals['dataNascimentoCidadao'])) {
        $this->dataNascimentoCidadao = $vals['dataNascimentoCidadao'];
      }
      if (isset($vals['sexoCidadao'])) {
        $this->sexoCidadao = $vals['sexoCidadao'];
      }
      if (isset($vals['racaCorCidadao'])) {
        $this->racaCorCidadao = $vals['racaCorCidadao'];
      }
      if (isset($vals['nomeMaeCidadao'])) {
        $this->nomeMaeCidadao = $vals['nomeMaeCidadao'];
      }
      if (isset($vals['desconheceNomeMae'])) {
        $this->desconheceNomeMae = $vals['desconheceNomeMae'];
      }
      if (isset($vals['codigoIbgeMunicipioNascimento'])) {
        $this->codigoIbgeMunicipioNascimento = $vals['codigoIbgeMunicipioNascimento'];
      }
      if (isset($vals['codigoNacionalidade'])) {
        $this->codigoNacionalidade = $vals['codigoNacionalidade'];
      }
      if (isset($vals['emailCidadao'])) {
        $this->emailCidadao = $vals['emailCidadao'];
      }
      if (isset($vals['numeroNisPisPasep'])) {
        $this->numeroNisPisPasep = $vals['numeroNisPisPasep'];
      }
      if (isset($vals['endereco'])) {
        $this->endereco = $vals['endereco'];
      }
      if (isset($vals['atencaoDomiciliarOrigem'])) {
        $this->atencaoDomiciliarOrigem = $vals['atencaoDomiciliarOrigem'];
      }
      if (isset($vals['atencaoDomiciliarModalidade'])) {
        $this->atencaoDomiciliarModalidade = $vals['atencaoDomiciliarModalidade'];
      }
      if (isset($vals['situacoesPresentes'])) {
        $this->situacoesPresentes = $vals['situacoesPresentes'];
      }
      if (isset($vals['cid10Principal'])) {
        $this->cid10Principal = $vals['cid10Principal'];
      }
      if (isset($vals['cid10Segundo'])) {
        $this->cid10Segundo = $vals['cid10Segundo'];
      }
      if (isset($vals['cid10Terceiro'])) {
        $this->cid10Terceiro = $vals['cid10Terceiro'];
      }
      if (isset($vals['conclusaoDestinoElegivel'])) {
        $this->conclusaoDestinoElegivel = $vals['conclusaoDestinoElegivel'];
      }
      if (isset($vals['conclusaoDestinoInelegivel'])) {
        $this->conclusaoDestinoInelegivel = $vals['conclusaoDestinoInelegivel'];
      }
      if (isset($vals['cuidadorCidadao'])) {
        $this->cuidadorCidadao = $vals['cuidadorCidadao'];
      }
    }
  }

  public function getName() {
    return 'FichaAvaliacaoElegibilidadeThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuidFicha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tpCdsOrigem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->headerTransport = new \br\gov\saude\esus\cds\transport\generated\thrift\common\UnicaLotacaoHeaderThrift();
            $xfer += $this->headerTransport->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numeroCartaoSus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeSocialCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataNascimentoCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sexoCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->racaCorCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeMaeCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->desconheceNomeMae);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigoIbgeMunicipioNascimento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->codigoNacionalidade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numeroNisPisPasep);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRUCT) {
            $this->endereco = new \br\gov\saude\esus\cds\transport\generated\thrift\common\EnderecoLocalPermanenciaThrift();
            $xfer += $this->endereco->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->atencaoDomiciliarOrigem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->atencaoDomiciliarModalidade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->situacoesPresentes = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->situacoesPresentes []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cid10Principal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cid10Segundo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cid10Terceiro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->conclusaoDestinoElegivel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::LST) {
            $this->conclusaoDestinoInelegivel = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI64($elem11);
              $this->conclusaoDestinoInelegivel []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cuidadorCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FichaAvaliacaoElegibilidadeThrift');
    if ($this->uuidFicha !== null) {
      $xfer += $output->writeFieldBegin('uuidFicha', TType::STRING, 1);
      $xfer += $output->writeString($this->uuidFicha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tpCdsOrigem !== null) {
      $xfer += $output->writeFieldBegin('tpCdsOrigem', TType::I32, 2);
      $xfer += $output->writeI32($this->tpCdsOrigem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->headerTransport !== null) {
      if (!is_object($this->headerTransport)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('headerTransport', TType::STRUCT, 3);
      $xfer += $this->headerTransport->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numeroCartaoSus !== null) {
      $xfer += $output->writeFieldBegin('numeroCartaoSus', TType::STRING, 4);
      $xfer += $output->writeString($this->numeroCartaoSus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomeCidadao !== null) {
      $xfer += $output->writeFieldBegin('nomeCidadao', TType::STRING, 5);
      $xfer += $output->writeString($this->nomeCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomeSocialCidadao !== null) {
      $xfer += $output->writeFieldBegin('nomeSocialCidadao', TType::STRING, 6);
      $xfer += $output->writeString($this->nomeSocialCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNascimentoCidadao !== null) {
      $xfer += $output->writeFieldBegin('dataNascimentoCidadao', TType::I64, 7);
      $xfer += $output->writeI64($this->dataNascimentoCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexoCidadao !== null) {
      $xfer += $output->writeFieldBegin('sexoCidadao', TType::I64, 8);
      $xfer += $output->writeI64($this->sexoCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->racaCorCidadao !== null) {
      $xfer += $output->writeFieldBegin('racaCorCidadao', TType::I64, 9);
      $xfer += $output->writeI64($this->racaCorCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomeMaeCidadao !== null) {
      $xfer += $output->writeFieldBegin('nomeMaeCidadao', TType::STRING, 10);
      $xfer += $output->writeString($this->nomeMaeCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desconheceNomeMae !== null) {
      $xfer += $output->writeFieldBegin('desconheceNomeMae', TType::BOOL, 11);
      $xfer += $output->writeBool($this->desconheceNomeMae);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigoIbgeMunicipioNascimento !== null) {
      $xfer += $output->writeFieldBegin('codigoIbgeMunicipioNascimento', TType::STRING, 12);
      $xfer += $output->writeString($this->codigoIbgeMunicipioNascimento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigoNacionalidade !== null) {
      $xfer += $output->writeFieldBegin('codigoNacionalidade', TType::I64, 13);
      $xfer += $output->writeI64($this->codigoNacionalidade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailCidadao !== null) {
      $xfer += $output->writeFieldBegin('emailCidadao', TType::STRING, 14);
      $xfer += $output->writeString($this->emailCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numeroNisPisPasep !== null) {
      $xfer += $output->writeFieldBegin('numeroNisPisPasep', TType::STRING, 15);
      $xfer += $output->writeString($this->numeroNisPisPasep);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endereco !== null) {
      if (!is_object($this->endereco)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('endereco', TType::STRUCT, 16);
      $xfer += $this->endereco->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->atencaoDomiciliarOrigem !== null) {
      $xfer += $output->writeFieldBegin('atencaoDomiciliarOrigem', TType::I64, 17);
      $xfer += $output->writeI64($this->atencaoDomiciliarOrigem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->atencaoDomiciliarModalidade !== null) {
      $xfer += $output->writeFieldBegin('atencaoDomiciliarModalidade', TType::I64, 18);
      $xfer += $output->writeI64($this->atencaoDomiciliarModalidade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->situacoesPresentes !== null) {
      if (!is_array($this->situacoesPresentes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('situacoesPresentes', TType::LST, 19);
      {
        $output->writeListBegin(TType::I64, count($this->situacoesPresentes));
        {
          foreach ($this->situacoesPresentes as $iter12)
          {
            $xfer += $output->writeI64($iter12);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cid10Principal !== null) {
      $xfer += $output->writeFieldBegin('cid10Principal', TType::STRING, 20);
      $xfer += $output->writeString($this->cid10Principal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cid10Segundo !== null) {
      $xfer += $output->writeFieldBegin('cid10Segundo', TType::STRING, 21);
      $xfer += $output->writeString($this->cid10Segundo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cid10Terceiro !== null) {
      $xfer += $output->writeFieldBegin('cid10Terceiro', TType::STRING, 22);
      $xfer += $output->writeString($this->cid10Terceiro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->conclusaoDestinoElegivel !== null) {
      $xfer += $output->writeFieldBegin('conclusaoDestinoElegivel', TType::I64, 23);
      $xfer += $output->writeI64($this->conclusaoDestinoElegivel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->conclusaoDestinoInelegivel !== null) {
      if (!is_array($this->conclusaoDestinoInelegivel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('conclusaoDestinoInelegivel', TType::LST, 24);
      {
        $output->writeListBegin(TType::I64, count($this->conclusaoDestinoInelegivel));
        {
          foreach ($this->conclusaoDestinoInelegivel as $iter13)
          {
            $xfer += $output->writeI64($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cuidadorCidadao !== null) {
      $xfer += $output->writeFieldBegin('cuidadorCidadao', TType::I64, 25);
      $xfer += $output->writeI64($this->cuidadorCidadao);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


